from random import randint, random

path = "C:\\Users\\student\\Documents\\Curriculum\\05-Python-Programming\\studentCode\\"

# 1. File Display
# Create a file containing a series of integers named numbers.txt. Write a program that displays all of the numbers in the file.

def write_number_file():
    '''
    Creates a file named numbers.txt and writes 100 random integers between 1 and 100,000 to it with one integer per line.
    '''
    with open(path + 'numbers.txt', 'w') as outfile:
        for num in range(100):
            outfile.write(str(randint(1, 100000)) + '\n')
        
# write_number_file()


def file_display():
    '''
    Reads and displays all of the lines in numbers.txt.
    '''
    # Open numbers.txt to read
    # use with to auto close the file when the with statment block completes
    with open(path + 'numbers.txt', 'r') as infile:
        # Set line to be the first line in the file
        line = infile.readline()
        # Continue processing until and empty string is read (EoF)
        while line != '':
            # strip the newline char from line
            line = line.rstrip('\n')
            # Display the data in line
            print(line)
            # Set line = next line of data in the file
            line = infile.readline()

# Call the main function
# file_display()


# 2. File Head Display
# Write a program that asks the user for the name of a file. The program should display only the first five lines of the file’s
# contents. If the file contains less than five lines, it should display the file’s entire contents.

def file_head_display():
    '''
    Prompts the user for a filename and prints the first 5 lines of the file
    '''
    # Prompt user for the filename
    filename = input('Enter the name of the file to be read: ')
    # use Try/Except code to handle IOError if filename does not exist
    try:
        # Open filename to read
        # use with to auto close the file when the with statment block completes
        with open(path + filename, 'r') as in_file:
            # For iteration in range 1 to 5
            for i in range(5):
                # print the line of data in the file, end = '' to remove the newline generated by print()
                print(in_file.readline(), end='')
    # Catch the IO error generated if the file does not exist
    except IOError as e:
        # display the error message
        print(e)
        print('Exiting')

# file_head_display()


# 3. Line Numbers
# Write a program that asks the user for the name of a file. The program should display the
# contents of the file with each line preceded with a line number followed by a colon. The
# line numbering should start at 1.

def line_numbers():
    '''
    Prompts the user for a filename and adds line numbers to the lines of data output
    '''
    # Prompt user for the filename
    filename = input('Enter the name of the file to be read: ')
    # use Try/Except code to handle IOError if filename does not exist
    try:
        # Open filename to read
        # use with to auto close the file when the with statment block completes
        with open(path + filename, 'r') as in_file:
            # initialize the accumalator
            line_num = 1
            # iterate over the lines in the file
            for line in in_file.readlines():
                #print the line number + ": " + line, end = '' to remove the newline generated by print()
                print(f'{line_num:>3}: {line}', end='')
                # increment line_num
                line_num += 1
    # Catch the IO error generated if the file does not exist
    except IOError as e:
        # display the error message
        print(e)
        print('Exiting')

# line_numbers()

# 4. Item Counter
# Assume that a file containing a series of names (as strings) is named names.txt and exists
# on the computer’s disk. Write a program that displays the number of names that are stored
# in the file. (Hint: Open the file and read every string stored in it. Use a variable to keep a
# count of the number of items that are read from the file.)

# Program assumes one name per line
def line_counter():
    '''
    Reads names.txt and displays the number of lines of data/items in the file
    '''
    # Prompt user for the filename
    # filename = input('Enter the name of the file to be read: ')
    filename = 'names.txt'
    # use Try/Except code to handle IOError if filename does not exist
    try:
        # Open filename to read
        # use with to auto close the file when the with statment block completes
        with open(path + filename, 'r') as in_file:
            # initialize the accumalator
            line_num = 0
            # iterate over the lines in the file
            for line in in_file.readlines():
                # increment line_num for each line in the file
                line_num += 1
        # Display the number of it
        print(f'-{path}{filename}: contains {line_num} lines/items')
    # Catch the IO error generated if the file does not exist
    except IOError as e:
        # display the error message
        print(e)
        print('Exiting')

# line_counter()

# 5. Sum of Numbers
# Assume that a file containing a series of integers is named numbers.txt and exists on the computer’s disk. Write a program
# that reads all of the numbers stored in the file and calculates their total.

def sum_of_numbers():
    '''
    Reads numbers.txt and displays the sum of the integers stored in the file
    '''
    # Prompt user for the filename
    # filename = input('Enter the name of the file to be read: ')
    filename = 'numbers.txt'
    # use Try/Except code to handle IOError if filename does not exist
    try:
        # Open filename to read
        # use with to auto close the file when the with statment block completes
        with open(path + filename, 'r') as in_file:
            # initialize the accumalator
            sum_of_nums = 0
            # iterate over the lines in the file
            for line in in_file.readlines():
                # increment the sum of numbers by the integer value of each line in the file
                sum_of_nums += int(line)
        # Display the sum of all lines in the file
        print(f'The sum of integers of numbers.txt is {sum_of_nums}')
    # Catch the IO error generated if the file does not exist
    except IOError as e:
        # display the error message
        print(e)
        print('Exiting')

# sum_of_numbers()

# 6. Average of Numbers
# Assume that a file containing a series of integers is named numbers.txt and exists on the
# computer’s disk. Write a program that calculates the average of all the numbers stored in
# the file.

# def avg_of_numbers():
#     '''
#     Reads numbers.txt and displays the average of the sum integers stored in the file
#     '''
#     # Prompt user for the filename
#     # filename = input('Enter the name of the file to be read: ')
#     filename = 'numbers.txt'
#     # use Try/Except code to handle IOError if filename does not exist
#     try:
#         # Open filename to read
#         # use with to auto close the file when the with statment block completes
#         with open(path + filename, 'r') as in_file:
#             # initialize the accumalators
#             line_num = 0
#             sum_of_nums = 0
#             # iterate over the lines in the file
#             for line in in_file.readlines():
#                 # increment the sum of numbers by the integer value of each line in the file
#                 sum_of_nums += int(line)
#                 # increment line_num for each line in the file
#                 line_num += 1
#         # calculate average by dividing the sum by the number of items/lines
#         average = sum_of_nums / line_num
#         # Display the average of the numbers stored in the file
#         print(f'The average of integers of numbers.txt is {average}')
#     # Catch the IO error generated if the file does not exist
#     except IOError as e:
#         # display the error message
#         print(e)
#         print('Exiting')

# avg_of_numbers()

# 7. Random Number File Writer
# Write a program that writes a series of random numbers to a file. Each random number
# should be in the range of 1 through 100. The application should let the user specify how
# many random numbers the file will hold.

def write_random_number_file():
    '''
    Creates a file named rdm_numbers.txt and writes a user specified amount of random numbers between 1 and 100 to it with one integer per line.
    '''
    # Prompt the user for the number of numbers to be generated in the file
    file_writes = int(input('Enter the number of random numbers you wish to generate: '))
    # Open filename to read
    # use with to auto close the file when the with statment block completes
    with open(path + 'rdm_numbers.txt', 'w') as outfile:
        # iterate over the range to the specified number of generated numbers
        for write in range(file_writes):
            # write to the file the string representation of the generated random number * 100 + a newline char
            outfile.write(str(random() * 100) + '\n')
        
# write_random_number_file()

# 8. Random Number File Reader
# This exercise assumes you have completed Programming Exercise 7, Random Number File
# Writer. Write another program that reads the random numbers from the file, display the
# numbers, and then display the following data:
# • The total of the numbers
# • The number of random numbers read from the file

def random_number_file_reader():
    '''
    Reads rdm_numbers.txt and displays the average of the sum integers stored in the file
    '''
    # Prompt user for the filename
    # filename = input('Enter the name of the file to be read: ')
    filename = 'rdm_numbers.txt'
    # use Try/Except code to handle IOError if filename does not exist
    try:
        # Open filename to read
        # use with to auto close the file when the with statment block completes
        with open(path + filename, 'r') as in_file:
            # initialize the accumalators
            line_num = 0
            sum_of_nums = 0
            # iterate over the lines in the file
            for line in in_file.readlines():
                print(line, end='')
                # increment the sum of numbers by the integer value of each line in the file
                sum_of_nums += float(line)
                # increment line_num for each line in the file
                line_num += 1
        # Display the sum of the numbers stored in the file
        print(f'\nThe total sum of all numbers in {filename} is: {sum_of_nums}')
        # Display the number of items in the file
        print(f'The number of random numbers stored in the file is: {line_num}')
    # Catch the IO error generated if the file does not exist
    except IOError as e:
        # display the error message
        print(e)
        print('Exiting')

random_number_file_reader()

# 9. Exception Handing
# Modify the program that you wrote for Exercise 6 so it handles the following exceptions:
# • It should handle any IOError exceptions that are raised when the file is opened and data
# is read from it.

def avg_of_numbers():
    '''
    Reads numbers.txt and displays the average of the sum integers stored in the file
    '''
    # Prompt user for the filename
    # filename = input('Enter the name of the file to be read: ')
    filename = 'numbers.txt'
    # use Try/Except code to handle IOError if filename does not exist
    try:
        # Open filename to read
        # use with to auto close the file when the with statment block completes
        with open(path + filename, 'r') as in_file:
            # initialize the accumalators
            line_num = 0
            sum_of_nums = 0
            # iterate over the lines in the file
            for line in in_file.readlines():
                # increment the sum of numbers by the integer value of each line in the file
                sum_of_nums += int(line)
                # increment line_num for each line in the file
                line_num += 1
        # calculate average by dividing the sum by the number of items/lines
        average = sum_of_nums / line_num
        # Display the average of the numbers stored in the file
        print(f'The average of integers of numbers.txt is {average}')
    # Catch the IO error generated if the file does not exist
    except IOError as e:
        # display the error message
        print(e)
        print('Exiting')

# avg_of_numbers()

# 10. Golf Scores
# The Springfork Amateur Golf Club has a tournament every weekend. The club president
# has asked you to write two programs:
# 
# 1. A program that will read each player’s name and golf score as keyboard input, and then
# save these as records in a file named golf.txt. (Each record will have a field for the
# player’s name and a field for the player’s score.)
# 
# 2. A program that reads the records from the golf.txt file and displays them.

def golf_score_writer():
    '''
    Prompts the user to input a player's name and their score and saves it to a file
    '''
    # set path to save the file to
    filename = 'golf.txt'
    # initialize a dictionary to store input values // key = name and value = score
    player_scores = dict()
    # initialize a value for continuous user input
    loop_check = 'yes'

    while loop_check != '':
        # Prompt for the player's name
        player_name = input('\nEnter the golfer\'s name: ')
        # Prompt for the player's score
        golf_score = int(input('Enter golfer\'s score: ')
        # add the player's name and score to the list
        player_scores[player_name] = golf_score
        # Prompt to continue entering names/scores
        loop_check = input('\nWould you like to enter another golfer\'s score? ')
            # check if continue loop check is no or n
            if loop_check.lower() == 'no' or loop_check.lower() == 'n':
                # Set loop check to '' to exit the loop
                loop_check = ''
    
    # Open filename to write
    # use with to auto close the file when the with statment block completes
    with open(path + filename, 'w') as outfile:
        # iterate over the items in scores
        for golfer, score in player_scores.items():
            # Write the player's name and score to the file
            outfile.write(f'{golfer},{score}\n')

# call golf writer
golf_score_writer()

def golf_score_reader():
    '''
    Reads the golf.txt file and displays the data
    '''
    # set path to save the file to
    filename = 'golf.txt'
    # use Try/Except code to handle IOError if filename does not exist
    try:
        # Open filename to write
        # use with to auto close the file when the with statment block completes
        with open(path + filename, 'w') as outfile:
            # print a header to make data easier to read
            print('------------------------------')
            print('|       Golfer       | Score |')
            print('------------------------------')
            # iterate over the lines in the file
            for line in in_file.readlines():
                name, score = line.rstrip('\n').split(',')
                print(f'|{name:^20}|{score:^7}|')
            print('------------------------------')

    # Catch the IO error generated if the file does not exist
    except IOError as e:
        # display the error message
        print(e)
        print('Exiting')

# call golf reader
golf_score_reader()